<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="业务流程" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">47.112.0.183</stringProp>
        <stringProp name="HTTPSampler.port">8801</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="默认全局变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="currentTime" elementType="Argument">
            <stringProp name="Argument.name">currentTime</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMddHHmmss,)}  </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="importance" elementType="Argument">
            <stringProp name="Argument.name">importance</stringProp>
            <stringProp name="Argument.value">${__Random(0,3,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="todotime" elementType="Argument">
            <stringProp name="Argument.name">todotime</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMddHHmmss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endDateTime" elementType="Argument">
            <stringProp name="Argument.name">endDateTime</stringProp>
            <stringProp name="Argument.value">20991231235959</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentDay" elementType="Argument">
            <stringProp name="Argument.name">currentDay</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="todotime_add15" elementType="Argument">
            <stringProp name="Argument.name">todotime_add15</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMddHHmm,,PT15M,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentMin" elementType="Argument">
            <stringProp name="Argument.name">currentMin</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMddHHmm,,PT3M,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device" elementType="Argument">
            <stringProp name="Argument.name">device</stringProp>
            <stringProp name="Argument.value">{&quot;deviceType&quot;:&quot;1&quot;,&quot;appVersion&quot;:&quot;1.5.0&quot;,&quot;deviceTag&quot;:&quot;59db5d3aef9002a9&quot;,&quot;isRoot&quot;:false,&quot;osVersion&quot;:27,&quot;ip&quot;:&quot;172.16.10.55&quot;,&quot;channel&quot;:&quot;_360&quot;,&quot;deviceModel&quot;:&quot;Meizu-16th Plus&quot;,&quot;channelName&quot;:&quot;android&quot;,&quot;channelType&quot;:&quot;sgx&quot;,&quot;deviceTagApp&quot;:&quot;59db5d3aef9002a9&quot;}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceTagApp" elementType="Argument">
            <stringProp name="Argument.name">deviceTagApp</stringProp>
            <stringProp name="Argument.value">59db5d3aef9002a9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">testbind@qq.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">14400001111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="content" elementType="Argument">
            <stringProp name="Argument.name">content</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device_model" elementType="Argument">
            <stringProp name="Argument.name">device_model</stringProp>
            <stringProp name="Argument.value">Meizu-16th Plus</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="todotime_add6" elementType="Argument">
            <stringProp name="Argument.name">todotime_add6</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMddHHmm,,PT9M,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="todotime_add2" elementType="Argument">
            <stringProp name="Argument.name">todotime_add2</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMddHHmm,,PT4M,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="todoDay_add3" elementType="Argument">
            <stringProp name="Argument.name">todoDay_add3</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMddHHmm,,P3D,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="next_time_add3" elementType="Argument">
            <stringProp name="Argument.name">next_time_add3</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd HH:mm:ss,,PT4M,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="afterThreeDay" elementType="Argument">
            <stringProp name="Argument.name">afterThreeDay</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMdd,,P3D,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="afterOneDay" elementType="Argument">
            <stringProp name="Argument.name">afterOneDay</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyyMMdd,,P1D,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentTimeByMM" elementType="Argument">
            <stringProp name="Argument.name">currentTimeByMM</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMddHHmm,)}  </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="summaryDay" elementType="Argument">
            <stringProp name="Argument.name">summaryDay</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="流程测试引擎" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">dbcheckpool</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.16.8:3306?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">pL%5^an3a$4in</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">planadmin</stringProp>
          <stringProp name="initQuery"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取流程数据" enabled="true">
          <stringProp name="dataSource">dbcheckpool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select flow_id,flow_name,account,password from automation.testdata_flow where state = 1 and flow_id = 1 order by flow_code</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">flow_id,flow_name,account,password</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.Date;
import java.text.SimpleDateFormat;

SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
System.out.println(df.format(new Date()) + &quot;: 待执行流程数=&quot;+vars.get(&quot;flow_id_#&quot;));
System.out.println(df.format(new Date()) + &quot;: 开始执行流程测试......&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="流程循环" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${flow_id_#}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="流程计数器" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${flow_id_#}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">M</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="流程初始化预处理--${M}-${__V(flow_name_${M})}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取节点数据" enabled="true">
              <stringProp name="dataSource">dbcheckpool</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select node_id,node_code,node_name,method,path,parameter,expect_response,pre_keys,post_keys,post_keys_extractor,post_keys_default,ischechdb,sql_str,sql_para,expect_db,sleep_time,isexcute_pre_sql,pre_sql_str,pre_sql_para,pre_sql_out from automation.testdata_node where flow_id = ? and state = 1 order by order_id
</stringProp>
              <stringProp name="queryArguments">${__V(flow_id_${M})}</stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames">node_id,node_code,node_name,method,path,parameter,expect_response,pre_keys,post_keys,post_keys_extractor,post_keys_default,ischechdb,sql_str,sql_para,expect_db,sleep_time,isexcute_pre_sql,pre_sql_str,pre_sql_para,pre_sql_out</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;password&quot;:&quot;${__V(password_${M})}&quot;,&quot;appType&quot;:&quot;1&quot;,&quot;mobile&quot;:&quot;${__V(account_${M})}&quot;,&quot;type&quot;:&quot;1&quot;,&quot;device&quot;:{&quot;deviceType&quot;:&quot;1&quot;,&quot;appVersion&quot;:&quot;1.4.7&quot;,&quot;deviceTag&quot;:&quot;ec:51:bc:a6:a2:d5&quot;,&quot;isRoot&quot;:false,&quot;osVersion&quot;:27,&quot;ip&quot;:&quot;172.16.11.200&quot;,&quot;channel&quot;:&quot;xiaomi&quot;,&quot;deviceModel&quot;:&quot;OPPO-OPPO R11s&quot;,&quot;channelName&quot;:&quot;android&quot;,&quot;channelType&quot;:&quot;sgx&quot;,&quot;deviceTagApp&quot;:&quot;ec:51:bc:a6:a2:d5&quot;}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/base/user/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">okhttp/3.3.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="457307866">&quot;code&quot;:200,&quot;msg&quot;:&quot;操作成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取新版token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token;user_id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON提取器" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">token;userid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.token;$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="重置节点计数器" enabled="true">
              <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.SimpleDateFormat;

vars.put(&quot;N&quot;,&quot;0&quot;);//节点循环外计数器重置为0,节点循环时每个节点执行前计数器加1

SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
System.out.println(df.format(new Date()) + &quot;: 执行流程--&quot;+vars.get(&quot;flow_name_&quot;+vars.get(&quot;M&quot;)));

vars.put(&quot;currentMin_add1&quot;, vars.get(&quot;currentMin&quot;)+&quot;00&quot;);
vars.put(&quot;currentMin_add6&quot;, vars.get(&quot;todotime_add6&quot;)+&quot;00&quot;);
vars.put(&quot;currentMin_add2&quot;, vars.get(&quot;todotime_add2&quot;)+&quot;00&quot;);

String time = vars.get(&quot;currentMin&quot;)+&quot;00&quot;;
String time6 = vars.get(&quot;todotime_add6&quot;)+&quot;00&quot;;
String time2 = vars.get(&quot;todotime_add2&quot;)+&quot;00&quot;;
String day3 = vars.get(&quot;todoDay_add3&quot;)+&quot;00&quot;;

String todoDay3 = day3.substring(6,8);
if(todoDay3.substring(0,1).equals(&quot;0&quot;)){
	todoDay3 = todoDay3.substring(1);
}

String todoDay = time.substring(6,8);
if(todoDay.substring(0,1).equals(&quot;0&quot;)){
	todoDay = todoDay.substring(1);
}


String todoMonth = time.substring(4,6);
if(todoMonth.substring(0,1).equals(&quot;0&quot;)){
	todoMonth = todoMonth.substring(1);
}


String todoHH = time.substring(8,10);
if(todoHH.substring(0,1).equals(&quot;0&quot;)){
	todoHH = todoHH.substring(1);
}

String todomm = time.substring(10,12);
if(todomm.substring(0,1).equals(&quot;0&quot;)){
	todomm = todomm.substring(1);
}

String todoHH2 = time2.substring(8,10);
if(todoHH2.substring(0,1).equals(&quot;0&quot;)){
	todoHH2 = todoHH2.substring(1);
}

String todomm2 = time2.substring(10,12);
if(todomm2.substring(0,1).equals(&quot;0&quot;)){
	todomm2 = todomm2.substring(1);
}

String todoHH6 = time6.substring(8,10);
if(todoHH6.substring(0,1).equals(&quot;0&quot;)){
	todoHH6 = todoHH6.substring(1);
}

String todomm6 = time6.substring(10,12);
if(todomm6.substring(0,1).equals(&quot;0&quot;)){
	todomm6 = todomm6.substring(1);
}


vars.put(&quot;todoMonth&quot;,todoMonth);

vars.put(&quot;todoDay&quot;,todoDay);
vars.put(&quot;todoDay3&quot;,todoDay3);

vars.put(&quot;todoHH2&quot;,todoHH2);
vars.put(&quot;todomm2&quot;,todomm2);

vars.put(&quot;todoHH6&quot;,todoHH6);
vars.put(&quot;todomm6&quot;,todomm6);

vars.put(&quot;todoHH&quot;,todoHH);
vars.put(&quot;todomm&quot;,todomm);


String todoHHRepeat = time.substring(8,10);
if(todoHHRepeat.substring(0,1).equals(&quot;0&quot;)){
	todoHHRepeat = todoHHRepeat.substring(1);
}

String todommRepeat = time.substring(10,12);
if(todommRepeat.substring(0,1).equals(&quot;0&quot;)){
	todommRepeat = todommRepeat.substring(1);
}

String todoHHRepeat2 = time2.substring(8,10);
if(todoHHRepeat2.substring(0,1).equals(&quot;0&quot;)){
	todoHHRepeat2 = todoHHRepeat2.substring(1);
}

String todommRepeat2 = time2.substring(10,12);
if(todommRepeat2.substring(0,1).equals(&quot;0&quot;)){
	todommRepeat2 = todommRepeat2.substring(1);
}


String todoHHRepeat6 = time6.substring(8,10);
if(todoHHRepeat6.substring(0,1).equals(&quot;0&quot;)){
	todoHHRepeat6 = todoHHRepeat6.substring(1);
}

String todommRepeat6 = time6.substring(10,12);
if(todommRepeat6.substring(0,1).equals(&quot;0&quot;)){
	todommRepeat6 = todommRepeat6.substring(1);
}

vars.put(&quot;todoHHRepeat2&quot;,todoHHRepeat2);
vars.put(&quot;todommRepeat2&quot;,todommRepeat2);

vars.put(&quot;todoHHRepeat6&quot;,todoHHRepeat6);
vars.put(&quot;todommRepeat6&quot;,todommRepeat6);

vars.put(&quot;todommRepeat&quot;,todommRepeat);
vars.put(&quot;todoHHRepeat&quot;,todoHHRepeat);










</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="节点循环" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${node_id_#}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${N}-${__V(node_name_${N})}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${para}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${__V(path_${N})}</stringProp>
              <stringProp name="HTTPSampler.method">${__V(method_${N})}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">节点接口请求</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip</stringProp>
                  </elementProp>
                  <elementProp name="token" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">okhttp/3.3.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="关联预处理" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;N&quot;,String.valueOf(Integer.parseInt(vars.get(&quot;N&quot;))+1));//每个节点执行前计数器加1



/*如果需要执行前置sql*/
String pre_sql = &quot;&quot;;
if(vars.get(&quot;isexcute_pre_sql_&quot;+vars.get(&quot;N&quot;)) != null &amp;&amp; vars.get(&quot;isexcute_pre_sql_&quot;+vars.get(&quot;N&quot;)).equals(&quot;1&quot;))
{
	pre_sql = vars.get(&quot;pre_sql_str_&quot;+vars.get(&quot;N&quot;));
	log.info(&quot;pre_sql----------&quot;+pre_sql);
	if(pre_sql != null &amp;&amp; pre_sql.length()&gt;0)
	{
		String pre_sql_paras = vars.get(&quot;pre_sql_para_&quot;+vars.get(&quot;N&quot;));
		
		/*如果有参数字段需要处理，替换处理参数字段的值为变量的值*/
		if(pre_sql_paras != null &amp;&amp; pre_sql_paras.length()&gt;0){
			pre_sql_paras = pre_sql_paras.trim();
			String[] pre_sql_paraItems = pre_sql_paras.split(&quot;;&quot;);
			 for (int i = 0; i &lt; pre_sql_paraItems.length; i++){
			 	log.info(pre_sql_paraItems[i] + &quot;: &quot; + vars.get(pre_sql_paraItems[i]));
			 	pre_sql = pre_sql.replace(&quot;$&quot;+pre_sql_paraItems[i]+&quot;$&quot;,vars.get(pre_sql_paraItems[i]));
			 	}
			}
	}
}
log.info(&quot;pre_sql-----&quot;+pre_sql);
vars.put(&quot;pre_sql&quot;,pre_sql);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="前置sql执行" enabled="true">
                <stringProp name="dataSource">dbcheckpool</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">${pre_sql}</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">${__V(pre_sql_out_${N})}</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="关联预处理" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String n = vars.get(&quot;N&quot;);
String para = vars.get(&quot;parameter_&quot;+n);
String preKeys = vars.get(&quot;pre_keys_&quot;+n);


/*如果入参有关联字段需要处理，替换处理关联字段的值为变量的值*/
if(preKeys != null &amp;&amp; preKeys.length()&gt;0){
	preKeys = preKeys.trim();
	String[] preKeyItems = preKeys.split(&quot;;&quot;);
	 for (int i = 0; i &lt; preKeyItems.length; i++){
	 	log.info(preKeyItems[i] + &quot;: &quot; + vars.get(preKeyItems[i]));
	 	para = para.replace(&quot;$&quot;+preKeyItems[i]+&quot;$&quot;,vars.get(preKeyItems[i]));
	 }
  }
vars.put(&quot;para&quot;,para);

/*如果没有配置post_key提取的字段，给个默认的NULL，不然json提取器会报错*/
if(vars.get(&quot;post_keys_&quot;+n) == null || vars.get(&quot;post_keys_&quot;+n).length()==0){
	vars.put(&quot;post_keys_&quot;+n,&quot;NULL&quot;);
	}

if(vars.get(&quot;post_keys_extractor_&quot;+n) == null || vars.get(&quot;post_keys_extractor_&quot;+n).length()==0){
	vars.put(&quot;post_keys_extractor_&quot;+n,&quot;NULL&quot;);
	}

if(vars.get(&quot;post_keys_default_&quot;+n) == null || vars.get(&quot;post_keys_default_&quot;+n).length()==0){
	vars.put(&quot;post_keys_default_&quot;+n,&quot;NULL&quot;);
	}</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="等待时间" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">try
{
	Thread.sleep(Long.parseLong(vars.get(&quot;sleep_time_&quot;+vars.get(&quot;N&quot;))));
}
catch(Exception e)
{
	e.printStackTrace();
}

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="post_key提取" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">${__V(post_keys_${N})}</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">${__V(post_keys_extractor_${N})}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">${__V(post_keys_default_${N})}</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="后置校验sql处理" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//后置校验sql处理
String sql = &quot;&quot;;
//if(vars.get(&quot;ischechdb_&quot;+vars.get(&quot;N&quot;)).equals(&quot;1&quot;))
//{
	sql = vars.get(&quot;sql_str_&quot;+vars.get(&quot;N&quot;));
	if(sql != null &amp;&amp; sql.length()&gt;0)
	{
		String sql_paras = vars.get(&quot;sql_para_&quot;+vars.get(&quot;N&quot;));
		
		/*如果有参数字段需要处理，替换处理参数字段的值为变量的值*/
		if(sql_paras != null &amp;&amp; sql_paras.length()&gt;0){
			sql_paras = sql_paras.trim();
			String[] sql_paraItems = sql_paras.split(&quot;;&quot;);
			 for (int i = 0; i &lt; sql_paraItems.length; i++){
			 	sql = sql.replace(&quot;$&quot;+sql_paraItems[i]+&quot;$&quot;,vars.get(sql_paraItems[i]));
			 	}
			}
	}
//}
vars.put(&quot;sql&quot;,sql);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="数据库校验sql执行" enabled="true">
                <stringProp name="dataSource">dbcheckpool</stringProp>
                <stringProp name="query">${sql}</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable">results</stringProp>
                <stringProp name="variableNames">Vcode</stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="返回值断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-955203109">${__V(expect_response_${N})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = prev.getResponseDataAsString();
String expect_values=vars.get(&quot;expect_response_&quot;+vars.get(&quot;N&quot;));

boolean isok = true;
if(expect_values != null &amp;&amp; expect_values.length()&gt;0)
{
  expect_values = expect_values.trim();
  String[] valueList = expect_values.split(&quot;\\$&quot;);
  for (int i = 0; i &lt; valueList.length; i++){
      if(i%2!=0){
         expect_values = expect_values.replace(&quot;$&quot;+valueList[i]+&quot;$&quot;,vars.get(valueList[i]));
      }
  }
  String[] expect_item = expect_values.split(&quot;\\|&quot;);
  for (int i = 0; i &lt; expect_item.length; i++){
  	
      if(!response.contains(expect_item[i]))
      {
        isok = false;
        break;
        }
      }
  }

if(!isok)
{
  Failure = true;
  FailureMessage = &quot;返回值断言匹配失败:&quot;+expect_values;
  System.out.println(&quot;==&gt;接口名称：&quot; + vars.get(&quot;path_&quot;+vars.get(&quot;N&quot;)) + &quot;/ 测试结果：&quot;+!Failure);
 }
else
{
  Failure = false;
  FailureMessage = &quot;返回值断言匹配通过&quot;;
  System.out.println(&quot;==&gt;&quot; + vars.get(&quot;path_&quot;+vars.get(&quot;N&quot;)) + &quot;测试结果：&quot;+!Failure);
 }

 </stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="数据库校验" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
String checkDb=vars.get(&quot;ischechdb_&quot;+vars.get(&quot;N&quot;));
if(checkDb != null &amp;&amp; checkDb.equals(&quot;1&quot;)){
    log.info(&quot;进入校验数据库&quot;);
    String preDbMap=vars.get(&quot;expect_db_&quot;+vars.get(&quot;N&quot;));
    preDbMap =preDbMap.trim();
    log.info(&quot;preDbMap:&quot;+preDbMap);
    List results=vars.getObject(&quot;results&quot;);
    log.info(&quot;results对象:&quot;+results);
    if(null!=results){
        int size=results.size();
        if(size&gt;0){
            JSONObject expjso = null;
            JSONObject dbjso = null;
            for(Map m:results){
                expjso = JSONObject.parseObject(preDbMap);
                dbjso = new JSONObject(m);
                if(expjso.hashCode() != dbjso.hashCode()){
                    String result =prev.getResponseDataAsString();
                	prev.setResponseCode(&quot;506&quot;);
                    prev.setSuccessful(false);
                    prev.setResponseMessage(&quot;数据库校验未通过&quot;);
            		prev.setResponseData(result+&quot;,\n数据库校验未通过,\n预期值:&quot;+expjso+&quot;,\n实际值:&quot;+dbjso);
                    }
                }
        }else{
            prev.setSuccessful(false);
            prev.setResponseData(&quot;数据库没有返回信息,接口result:&quot;+result);
        }
    }else{
    		log.error(&quot;数据库返回results为null&quot;);
    		prev.setSuccessful(false);
          prev.setResponseData(&quot;数据没有返回信息,接口result:&quot;+result);
        }
}else{
    log.info(&quot;没有进入校验数据库&quot;);
    }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
